{"version":3,"sources":["components/letter/Letter.tsx","components/countries/Country.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Letter","props","className","id","active","onClick","activate","value","Country","country","Card","sx","maxWidth","window","location","href","maps","googleMaps","CardActionArea","CardMedia","component","height","image","flags","svg","alt","name","official","CardContent","Typography","gutterBottom","variant","capital","map","i","color","millify","population","align","description","fetchCountries","a","fetch","response","json","App","useState","setActive","activeCountry","setActiveCountry","countries","setCountries","alphabet","useEffect","fetchCountry","sortedCountries","params","common","result","node","query","pages","Object","keys","extract","filter","toUpperCase","sortedCountriesList","Stack","divider","Divider","orientation","flexItem","direction","spacing","letter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43a8398f.chunk.js","sourcesContent":["import \"./Letter.css\"\n\ninterface Props {\n    id: number;\n    value: string,\n    active: number,\n    activate: Function\n}\n\nexport default function Letter(props: Props): JSX.Element {\n\n    const className: string = props.id === props.active ? ' active' : ''\n\n    return <div onClick={() => props.activate(props.id)} className={\"letter\" + className}>{props.value}</div>;\n}","import \"./Country.css\"\nimport { Card, CardContent, CardMedia, Typography, CardActionArea } from '@mui/material'\nimport millify from \"millify\"\n\nexport interface CountryInterface {\n    name: {\n        common: string,\n        official: string\n    },\n    independent: boolean,\n    capital: Array<string>,\n    description: string,\n    region: string,\n    subregion: string,\n    latlng: Array<number>,\n    area: number,\n    flags: {\n        png: string,\n        svg: string\n    },\n    maps: {\n        googleMaps: string\n    },\n    population: number,\n    continents: Array<string>,\n    capitalInfo: {\n        latlng: Array<number>\n    }\n}\n\nexport function Country(country: CountryInterface): JSX.Element {\n    return <Card sx={{ maxWidth: 345 }} onClick={() => { window.location.href = country.maps.googleMaps }}  >\n        <CardActionArea>\n            <CardMedia\n                component=\"img\"\n                height=\"140\"\n                image={country.flags.svg}\n                alt={country.name.official}\n            />\n            <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                    {country.name.official}\n                </Typography>\n\n                {country.capital?.map((capital, i) => <Typography variant=\"subtitle1\" key={i}> {capital}</Typography>)}\n\n                <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Population: {millify(country.population)}\n                </Typography>\n\n                <Typography align=\"left\" variant=\"body1\" color=\"text.secondary\">\n                    {country.description}\n                </Typography>\n            </CardContent>\n        </CardActionArea>\n    </Card>\n}","import \"./App.css\";\nimport { useState, useEffect } from \"react\"\nimport { Stack, Divider } from \"@mui/material\"\nimport Letter from './components/letter/Letter'\nimport { Country, CountryInterface } from './components/countries/Country'\n\nasync function fetchCountries(): Promise<CountryInterface[]> {\n  const response = await fetch(\"https://restcountries.com/v3.1/all\")\n  return await response.json()\n}\n\nfunction App() {\n\n  let [active, setActive] = useState(0)\n  let [activeCountry, setActiveCountry] = useState(-1)\n  let [countries, setCountries] = useState<CountryInterface[]>([])\n\n  const alphabet: Array<string> = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetchCountries()\n      setCountries(response)\n    })()\n  }, [])\n\n  const activate = (value: number) => {\n    setActiveCountry(-1)\n    setActive(value)\n  }\n\n  const fetchCountry = async (value: number) => {\n    setActiveCountry(value)\n    const country = sortedCountries[value]\n    if (!country.description) {\n      const wikiAPI = 'https://en.wikipedia.org/w/api.php'\n      const params = `?origin=*&format=json&action=query&prop=extracts&explaintext&exsentences=3&titles=${country.name.common}`\n\n      const response = await fetch(wikiAPI + params)\n      const result = await response.json()\n      countries = countries.map(node => {\n        if (node.name.common === country.name.common)\n          country.description = result.query.pages[Object.keys(result.query.pages)[0]].extract\n        return node\n      })\n      setCountries(countries)\n    }\n  }\n\n  const sortedCountries = countries.filter(country => country.name.common[0]?.toUpperCase() === alphabet[active])\n  const sortedCountriesList = sortedCountries.map((country, i) => <div key={i} onClick={() => fetchCountry(i)} className=\"country-name\">{country.name.common}</div>)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Stack\n          divider={<Divider orientation=\"vertical\" flexItem />}\n          direction=\"row\"\n          spacing={1}>\n          {alphabet.map((letter, i) => <Letter key={i} id={i} activate={activate} active={active} value={letter} />)}\n        </Stack>\n        <hr />\n        {activeCountry !== -1 ? <Country {...sortedCountries[activeCountry]} /> : sortedCountriesList}\n      </header>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry: any = null) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}